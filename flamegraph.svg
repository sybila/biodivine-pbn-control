<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="33582"><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::intersect (4 samples, 0.01%)</title><rect x="0.0119%" y="309" width="0.0119%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="4"/><text x="0.2619%" y="319.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::and (4 samples, 0.01%)</title><rect x="0.0119%" y="293" width="0.0119%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="4"/><text x="0.2619%" y="303.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply (4 samples, 0.01%)</title><rect x="0.0119%" y="277" width="0.0119%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="4"/><text x="0.2619%" y="287.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::minus (5 samples, 0.01%)</title><rect x="0.0238%" y="309" width="0.0149%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="5"/><text x="0.2738%" y="319.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::and_not (5 samples, 0.01%)</title><rect x="0.0238%" y="293" width="0.0149%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="5"/><text x="0.2738%" y="303.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (5 samples, 0.01%)</title><rect x="0.0238%" y="277" width="0.0149%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="5"/><text x="0.2738%" y="287.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (4 samples, 0.01%)</title><rect x="0.0625%" y="245" width="0.0119%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="4"/><text x="0.3125%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply (4 samples, 0.01%)</title><rect x="0.1072%" y="181" width="0.0119%" height="15" fill="rgb(228,23,34)" fg:x="36" fg:w="4"/><text x="0.3572%" y="191.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (4 samples, 0.01%)</title><rect x="0.1548%" y="117" width="0.0119%" height="15" fill="rgb(218,30,26)" fg:x="52" fg:w="4"/><text x="0.4048%" y="127.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (9 samples, 0.03%)</title><rect x="0.1668%" y="117" width="0.0268%" height="15" fill="rgb(220,122,19)" fg:x="56" fg:w="9"/><text x="0.4168%" y="127.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (5 samples, 0.01%)</title><rect x="0.1787%" y="101" width="0.0149%" height="15" fill="rgb(250,228,42)" fg:x="60" fg:w="5"/><text x="0.4287%" y="111.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (15 samples, 0.04%)</title><rect x="0.1519%" y="133" width="0.0447%" height="15" fill="rgb(240,193,28)" fg:x="51" fg:w="15"/><text x="0.4019%" y="143.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (23 samples, 0.07%)</title><rect x="0.1340%" y="165" width="0.0685%" height="15" fill="rgb(216,20,37)" fg:x="45" fg:w="23"/><text x="0.3840%" y="175.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (20 samples, 0.06%)</title><rect x="0.1429%" y="149" width="0.0596%" height="15" fill="rgb(206,188,39)" fg:x="48" fg:w="20"/><text x="0.3929%" y="159.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (28 samples, 0.08%)</title><rect x="0.1251%" y="181" width="0.0834%" height="15" fill="rgb(217,207,13)" fg:x="42" fg:w="28"/><text x="0.3751%" y="191.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (36 samples, 0.11%)</title><rect x="0.1072%" y="197" width="0.1072%" height="15" fill="rgb(231,73,38)" fg:x="36" fg:w="36"/><text x="0.3572%" y="207.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (40 samples, 0.12%)</title><rect x="0.0983%" y="213" width="0.1191%" height="15" fill="rgb(225,20,46)" fg:x="33" fg:w="40"/><text x="0.3483%" y="223.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (45 samples, 0.13%)</title><rect x="0.0864%" y="229" width="0.1340%" height="15" fill="rgb(210,31,41)" fg:x="29" fg:w="45"/><text x="0.3364%" y="239.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (50 samples, 0.15%)</title><rect x="0.0744%" y="245" width="0.1489%" height="15" fill="rgb(221,200,47)" fg:x="25" fg:w="50"/><text x="0.3244%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (57 samples, 0.17%)</title><rect x="0.0596%" y="261" width="0.1697%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="57"/><text x="0.3096%" y="271.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::pick_vertex (63 samples, 0.19%)</title><rect x="0.0447%" y="309" width="0.1876%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="63"/><text x="0.2947%" y="319.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick (63 samples, 0.19%)</title><rect x="0.0447%" y="293" width="0.1876%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="63"/><text x="0.2947%" y="303.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_relation_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::pick::r_pick (63 samples, 0.19%)</title><rect x="0.0447%" y="277" width="0.1876%" height="15" fill="rgb(221,5,38)" fg:x="15" fg:w="63"/><text x="0.2947%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (397 samples, 1.18%)</title><rect x="6.7268%" y="245" width="1.1822%" height="15" fill="rgb(247,18,42)" fg:x="2259" fg:w="397"/><text x="6.9768%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (48 samples, 0.14%)</title><rect x="7.7661%" y="229" width="0.1429%" height="15" fill="rgb(241,131,45)" fg:x="2608" fg:w="48"/><text x="8.0161%" y="239.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::minus (2,582 samples, 7.69%)</title><rect x="0.2323%" y="293" width="7.6886%" height="15" fill="rgb(249,31,29)" fg:x="78" fg:w="2582"/><text x="0.4823%" y="303.50">biodivine_l..</text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::and_not (2,582 samples, 7.69%)</title><rect x="0.2323%" y="277" width="7.6886%" height="15" fill="rgb(225,111,53)" fg:x="78" fg:w="2582"/><text x="0.4823%" y="287.50">biodivine_l..</text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (2,582 samples, 7.69%)</title><rect x="0.2323%" y="261" width="7.6886%" height="15" fill="rgb(238,160,17)" fg:x="78" fg:w="2582"/><text x="0.4823%" y="271.50">biodivine_l..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (4 samples, 0.01%)</title><rect x="7.9090%" y="245" width="0.0119%" height="15" fill="rgb(214,148,48)" fg:x="2656" fg:w="4"/><text x="8.1590%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.01%)</title><rect x="9.2609%" y="245" width="0.0149%" height="15" fill="rgb(232,36,49)" fg:x="3110" fg:w="5"/><text x="9.5109%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="9.2639%" y="229" width="0.0119%" height="15" fill="rgb(209,103,24)" fg:x="3111" fg:w="4"/><text x="9.5139%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (123 samples, 0.37%)</title><rect x="9.2758%" y="245" width="0.3663%" height="15" fill="rgb(229,88,8)" fg:x="3115" fg:w="123"/><text x="9.5258%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.02%)</title><rect x="9.6182%" y="229" width="0.0238%" height="15" fill="rgb(213,181,19)" fg:x="3230" fg:w="8"/><text x="9.8682%" y="239.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::union (580 samples, 1.73%)</title><rect x="7.9209%" y="293" width="1.7271%" height="15" fill="rgb(254,191,54)" fg:x="2660" fg:w="580"/><text x="8.1709%" y="303.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::or (580 samples, 1.73%)</title><rect x="7.9209%" y="277" width="1.7271%" height="15" fill="rgb(241,83,37)" fg:x="2660" fg:w="580"/><text x="8.1709%" y="287.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (580 samples, 1.73%)</title><rect x="7.9209%" y="261" width="1.7271%" height="15" fill="rgb(233,36,39)" fg:x="2660" fg:w="580"/><text x="8.1709%" y="271.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::high_link_of (70 samples, 0.21%)</title><rect x="18.1317%" y="261" width="0.2084%" height="15" fill="rgb(226,3,54)" fg:x="6089" fg:w="70"/><text x="18.3817%" y="271.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::low_link_of (106 samples, 0.32%)</title><rect x="18.3402%" y="261" width="0.3156%" height="15" fill="rgb(245,192,40)" fg:x="6159" fg:w="106"/><text x="18.5902%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.02%)</title><rect x="18.8524%" y="181" width="0.0208%" height="15" fill="rgb(238,167,29)" fg:x="6331" fg:w="7"/><text x="19.1024%" y="191.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.03%)</title><rect x="18.8524%" y="213" width="0.0328%" height="15" fill="rgb(232,182,51)" fg:x="6331" fg:w="11"/><text x="19.1024%" y="223.50"></text></g><g><title>_int_realloc (11 samples, 0.03%)</title><rect x="18.8524%" y="197" width="0.0328%" height="15" fill="rgb(231,60,39)" fg:x="6331" fg:w="11"/><text x="19.1024%" y="207.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::push_node (78 samples, 0.23%)</title><rect x="18.6588%" y="261" width="0.2323%" height="15" fill="rgb(208,69,12)" fg:x="6266" fg:w="78"/><text x="18.9088%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.04%)</title><rect x="18.8524%" y="245" width="0.0387%" height="15" fill="rgb(235,93,37)" fg:x="6331" fg:w="13"/><text x="19.1024%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.04%)</title><rect x="18.8524%" y="229" width="0.0387%" height="15" fill="rgb(213,116,39)" fg:x="6331" fg:w="13"/><text x="19.1024%" y="239.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::root_pointer (44 samples, 0.13%)</title><rect x="18.8911%" y="261" width="0.1310%" height="15" fill="rgb(222,207,29)" fg:x="6344" fg:w="44"/><text x="19.1411%" y="271.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::var_of (201 samples, 0.60%)</title><rect x="19.0221%" y="261" width="0.5985%" height="15" fill="rgb(206,96,30)" fg:x="6388" fg:w="201"/><text x="19.2721%" y="271.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd_node::&lt;impl biodivine_lib_bdd::BddNode&gt;::mk_node (29 samples, 0.09%)</title><rect x="19.6206%" y="261" width="0.0864%" height="15" fill="rgb(218,138,4)" fg:x="6589" fg:w="29"/><text x="19.8706%" y="271.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd_pointer::&lt;impl biodivine_lib_bdd::BddPointer&gt;::as_bool (293 samples, 0.87%)</title><rect x="19.7070%" y="261" width="0.8725%" height="15" fill="rgb(250,191,14)" fg:x="6618" fg:w="293"/><text x="19.9570%" y="271.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd_pointer::&lt;impl biodivine_lib_bdd::BddPointer&gt;::from_bool (30 samples, 0.09%)</title><rect x="20.5795%" y="261" width="0.0893%" height="15" fill="rgb(239,60,40)" fg:x="6911" fg:w="30"/><text x="20.8295%" y="271.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd_pointer::&lt;impl biodivine_lib_bdd::BddPointer&gt;::is_one (91 samples, 0.27%)</title><rect x="20.6688%" y="261" width="0.2710%" height="15" fill="rgb(206,27,48)" fg:x="6941" fg:w="91"/><text x="20.9188%" y="271.50"></text></g><g><title>biodivine_lib_bdd::op_function::and (176 samples, 0.52%)</title><rect x="20.9398%" y="261" width="0.5241%" height="15" fill="rgb(225,35,8)" fg:x="7032" fg:w="176"/><text x="21.1898%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="23.4947%" y="245" width="0.0208%" height="15" fill="rgb(250,213,24)" fg:x="7890" fg:w="7"/><text x="23.7447%" y="255.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.4977%" y="229" width="0.0179%" height="15" fill="rgb(247,123,22)" fg:x="7891" fg:w="6"/><text x="23.7477%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.4977%" y="213" width="0.0179%" height="15" fill="rgb(231,138,38)" fg:x="7891" fg:w="6"/><text x="23.7477%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.4977%" y="197" width="0.0179%" height="15" fill="rgb(231,145,46)" fg:x="7891" fg:w="6"/><text x="23.7477%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.4977%" y="181" width="0.0179%" height="15" fill="rgb(251,118,11)" fg:x="7891" fg:w="6"/><text x="23.7477%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.4977%" y="165" width="0.0179%" height="15" fill="rgb(217,147,25)" fg:x="7891" fg:w="6"/><text x="23.7477%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.4977%" y="149" width="0.0179%" height="15" fill="rgb(247,81,37)" fg:x="7891" fg:w="6"/><text x="23.7477%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.4977%" y="133" width="0.0179%" height="15" fill="rgb(209,12,38)" fg:x="7891" fg:w="6"/><text x="23.7477%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="23.5007%" y="117" width="0.0149%" height="15" fill="rgb(227,1,9)" fg:x="7892" fg:w="5"/><text x="23.7507%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="23.5037%" y="101" width="0.0119%" height="15" fill="rgb(248,47,43)" fg:x="7893" fg:w="4"/><text x="23.7537%" y="111.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="23.8461%" y="229" width="0.0238%" height="15" fill="rgb(221,10,30)" fg:x="8008" fg:w="8"/><text x="24.0961%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.8521%" y="213" width="0.0179%" height="15" fill="rgb(210,229,1)" fg:x="8010" fg:w="6"/><text x="24.1021%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.8521%" y="197" width="0.0179%" height="15" fill="rgb(222,148,37)" fg:x="8010" fg:w="6"/><text x="24.1021%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.8521%" y="181" width="0.0179%" height="15" fill="rgb(234,67,33)" fg:x="8010" fg:w="6"/><text x="24.1021%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.8521%" y="165" width="0.0179%" height="15" fill="rgb(247,98,35)" fg:x="8010" fg:w="6"/><text x="24.1021%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.8521%" y="149" width="0.0179%" height="15" fill="rgb(247,138,52)" fg:x="8010" fg:w="6"/><text x="24.1021%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="23.8521%" y="133" width="0.0179%" height="15" fill="rgb(213,79,30)" fg:x="8010" fg:w="6"/><text x="24.1021%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="23.8550%" y="117" width="0.0149%" height="15" fill="rgb(246,177,23)" fg:x="8011" fg:w="5"/><text x="24.1050%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="23.8580%" y="101" width="0.0119%" height="15" fill="rgb(230,62,27)" fg:x="8012" fg:w="4"/><text x="24.1080%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (810 samples, 2.41%)</title><rect x="21.4639%" y="261" width="2.4120%" height="15" fill="rgb(216,154,8)" fg:x="7208" fg:w="810"/><text x="21.7139%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (121 samples, 0.36%)</title><rect x="23.5156%" y="245" width="0.3603%" height="15" fill="rgb(244,35,45)" fg:x="7897" fg:w="121"/><text x="23.7656%" y="255.50"></text></g><g><title>biodivine_pbn_control::aeon::reachability::backward (7,945 samples, 23.66%)</title><rect x="0.2323%" y="309" width="23.6585%" height="15" fill="rgb(251,115,12)" fg:x="78" fg:w="7945"/><text x="0.4823%" y="319.50">biodivine_pbn_control::aeon::reachabil..</text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_symbolic_async_graph_operators::&lt;impl biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph&gt;::var_pre (4,783 samples, 14.24%)</title><rect x="9.6480%" y="293" width="14.2427%" height="15" fill="rgb(240,54,50)" fg:x="3240" fg:w="4783"/><text x="9.8980%" y="303.50">biodivine_lib_param_bn..</text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (4,783 samples, 14.24%)</title><rect x="9.6480%" y="277" width="14.2427%" height="15" fill="rgb(233,84,52)" fg:x="3240" fg:w="4783"/><text x="9.8980%" y="287.50">biodivine_lib_bdd::_im..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (5 samples, 0.01%)</title><rect x="23.8759%" y="261" width="0.0149%" height="15" fill="rgb(207,117,47)" fg:x="8018" fg:w="5"/><text x="24.1259%" y="271.50"></text></g><g><title>biodivine_pbn_control::aeon::reachability::forward (17 samples, 0.05%)</title><rect x="23.8908%" y="309" width="0.0506%" height="15" fill="rgb(249,43,39)" fg:x="8023" fg:w="17"/><text x="24.1408%" y="319.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_symbolic_async_graph_operators::&lt;impl biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph&gt;::var_post (17 samples, 0.05%)</title><rect x="23.8908%" y="293" width="0.0506%" height="15" fill="rgb(209,38,44)" fg:x="8023" fg:w="17"/><text x="24.1408%" y="303.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (17 samples, 0.05%)</title><rect x="23.8908%" y="277" width="0.0506%" height="15" fill="rgb(236,212,23)" fg:x="8023" fg:w="17"/><text x="24.1408%" y="287.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::intersect (43 samples, 0.13%)</title><rect x="23.9414%" y="293" width="0.1280%" height="15" fill="rgb(242,79,21)" fg:x="8040" fg:w="43"/><text x="24.1914%" y="303.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::and (43 samples, 0.13%)</title><rect x="23.9414%" y="277" width="0.1280%" height="15" fill="rgb(211,96,35)" fg:x="8040" fg:w="43"/><text x="24.1914%" y="287.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply (43 samples, 0.13%)</title><rect x="23.9414%" y="261" width="0.1280%" height="15" fill="rgb(253,215,40)" fg:x="8040" fg:w="43"/><text x="24.1914%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.02%)</title><rect x="24.0486%" y="245" width="0.0208%" height="15" fill="rgb(211,81,21)" fg:x="8076" fg:w="7"/><text x="24.2986%" y="255.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::minus (25 samples, 0.07%)</title><rect x="24.0694%" y="293" width="0.0744%" height="15" fill="rgb(208,190,38)" fg:x="8083" fg:w="25"/><text x="24.3194%" y="303.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::and_not (25 samples, 0.07%)</title><rect x="24.0694%" y="277" width="0.0744%" height="15" fill="rgb(235,213,38)" fg:x="8083" fg:w="25"/><text x="24.3194%" y="287.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (25 samples, 0.07%)</title><rect x="24.0694%" y="261" width="0.0744%" height="15" fill="rgb(237,122,38)" fg:x="8083" fg:w="25"/><text x="24.3194%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.01%)</title><rect x="24.1320%" y="245" width="0.0119%" height="15" fill="rgb(244,218,35)" fg:x="8104" fg:w="4"/><text x="24.3820%" y="255.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_symbolic_async_graph_operators::&lt;impl biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph&gt;::var_can_post (9 samples, 0.03%)</title><rect x="24.1439%" y="293" width="0.0268%" height="15" fill="rgb(240,68,47)" fg:x="8108" fg:w="9"/><text x="24.3939%" y="303.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::and (9 samples, 0.03%)</title><rect x="24.1439%" y="277" width="0.0268%" height="15" fill="rgb(210,16,53)" fg:x="8108" fg:w="9"/><text x="24.3939%" y="287.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply (9 samples, 0.03%)</title><rect x="24.1439%" y="261" width="0.0268%" height="15" fill="rgb(235,124,12)" fg:x="8108" fg:w="9"/><text x="24.3939%" y="271.50"></text></g><g><title>_int_free (11 samples, 0.03%)</title><rect x="24.1707%" y="277" width="0.0328%" height="15" fill="rgb(224,169,11)" fg:x="8117" fg:w="11"/><text x="24.4207%" y="287.50"></text></g><g><title>systrim (7 samples, 0.02%)</title><rect x="24.1826%" y="261" width="0.0208%" height="15" fill="rgb(250,166,2)" fg:x="8121" fg:w="7"/><text x="24.4326%" y="271.50"></text></g><g><title>__GI___default_morecore (7 samples, 0.02%)</title><rect x="24.1826%" y="245" width="0.0208%" height="15" fill="rgb(242,216,29)" fg:x="8121" fg:w="7"/><text x="24.4326%" y="255.50"></text></g><g><title>__GI___sbrk (7 samples, 0.02%)</title><rect x="24.1826%" y="229" width="0.0208%" height="15" fill="rgb(230,116,27)" fg:x="8121" fg:w="7"/><text x="24.4326%" y="239.50"></text></g><g><title>__GI___sbrk (7 samples, 0.02%)</title><rect x="24.1826%" y="213" width="0.0208%" height="15" fill="rgb(228,99,48)" fg:x="8121" fg:w="7"/><text x="24.4326%" y="223.50"></text></g><g><title>__brk (7 samples, 0.02%)</title><rect x="24.1826%" y="197" width="0.0208%" height="15" fill="rgb(253,11,6)" fg:x="8121" fg:w="7"/><text x="24.4326%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="24.1826%" y="181" width="0.0208%" height="15" fill="rgb(247,143,39)" fg:x="8121" fg:w="7"/><text x="24.4326%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="24.1826%" y="165" width="0.0208%" height="15" fill="rgb(236,97,10)" fg:x="8121" fg:w="7"/><text x="24.4326%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="24.1856%" y="149" width="0.0179%" height="15" fill="rgb(233,208,19)" fg:x="8122" fg:w="6"/><text x="24.4356%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="24.1856%" y="133" width="0.0179%" height="15" fill="rgb(216,164,2)" fg:x="8122" fg:w="6"/><text x="24.4356%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="24.1886%" y="117" width="0.0149%" height="15" fill="rgb(220,129,5)" fg:x="8123" fg:w="5"/><text x="24.4386%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="24.1886%" y="101" width="0.0149%" height="15" fill="rgb(242,17,10)" fg:x="8123" fg:w="5"/><text x="24.4386%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="24.1886%" y="85" width="0.0149%" height="15" fill="rgb(242,107,0)" fg:x="8123" fg:w="5"/><text x="24.4386%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="24.1886%" y="69" width="0.0149%" height="15" fill="rgb(251,28,31)" fg:x="8123" fg:w="5"/><text x="24.4386%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="24.1886%" y="53" width="0.0149%" height="15" fill="rgb(233,223,10)" fg:x="8123" fg:w="5"/><text x="24.4386%" y="63.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="24.1915%" y="37" width="0.0119%" height="15" fill="rgb(215,21,27)" fg:x="8124" fg:w="4"/><text x="24.4415%" y="47.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="44.6519%" y="229" width="0.0149%" height="15" fill="rgb(232,23,21)" fg:x="14995" fg:w="5"/><text x="44.9019%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="44.6549%" y="213" width="0.0119%" height="15" fill="rgb(244,5,23)" fg:x="14996" fg:w="4"/><text x="44.9049%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="44.6549%" y="197" width="0.0119%" height="15" fill="rgb(226,81,46)" fg:x="14996" fg:w="4"/><text x="44.9049%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="44.6549%" y="181" width="0.0119%" height="15" fill="rgb(247,70,30)" fg:x="14996" fg:w="4"/><text x="44.9049%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="44.6549%" y="165" width="0.0119%" height="15" fill="rgb(212,68,19)" fg:x="14996" fg:w="4"/><text x="44.9049%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="44.6549%" y="149" width="0.0119%" height="15" fill="rgb(240,187,13)" fg:x="14996" fg:w="4"/><text x="44.9049%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="44.6549%" y="133" width="0.0119%" height="15" fill="rgb(223,113,26)" fg:x="14996" fg:w="4"/><text x="44.9049%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="44.6549%" y="117" width="0.0119%" height="15" fill="rgb(206,192,2)" fg:x="14996" fg:w="4"/><text x="44.9049%" y="127.50"></text></g><g><title>_int_free (6 samples, 0.02%)</title><rect x="44.6757%" y="229" width="0.0179%" height="15" fill="rgb(241,108,4)" fg:x="15003" fg:w="6"/><text x="44.9257%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.01%)</title><rect x="44.6936%" y="229" width="0.0119%" height="15" fill="rgb(247,173,49)" fg:x="15009" fg:w="4"/><text x="44.9436%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="44.6936%" y="213" width="0.0119%" height="15" fill="rgb(224,114,35)" fg:x="15009" fg:w="4"/><text x="44.9436%" y="223.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.01%)</title><rect x="44.6936%" y="197" width="0.0119%" height="15" fill="rgb(245,159,27)" fg:x="15009" fg:w="4"/><text x="44.9436%" y="207.50"></text></g><g><title>_int_realloc (4 samples, 0.01%)</title><rect x="44.6936%" y="181" width="0.0119%" height="15" fill="rgb(245,172,44)" fg:x="15009" fg:w="4"/><text x="44.9436%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="47.9543%" y="213" width="0.0149%" height="15" fill="rgb(236,23,11)" fg:x="16104" fg:w="5"/><text x="48.2043%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="47.9543%" y="197" width="0.0149%" height="15" fill="rgb(205,117,38)" fg:x="16104" fg:w="5"/><text x="48.2043%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="47.9543%" y="181" width="0.0149%" height="15" fill="rgb(237,72,25)" fg:x="16104" fg:w="5"/><text x="48.2043%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="47.9543%" y="165" width="0.0149%" height="15" fill="rgb(244,70,9)" fg:x="16104" fg:w="5"/><text x="48.2043%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="47.9543%" y="149" width="0.0149%" height="15" fill="rgb(217,125,39)" fg:x="16104" fg:w="5"/><text x="48.2043%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="47.9543%" y="133" width="0.0149%" height="15" fill="rgb(235,36,10)" fg:x="16104" fg:w="5"/><text x="48.2043%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="47.9572%" y="117" width="0.0119%" height="15" fill="rgb(251,123,47)" fg:x="16105" fg:w="4"/><text x="48.2072%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="47.9572%" y="101" width="0.0119%" height="15" fill="rgb(221,13,13)" fg:x="16105" fg:w="4"/><text x="48.2072%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="47.9572%" y="85" width="0.0119%" height="15" fill="rgb(238,131,9)" fg:x="16105" fg:w="4"/><text x="48.2072%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,227 samples, 3.65%)</title><rect x="44.7055%" y="229" width="3.6537%" height="15" fill="rgb(211,50,8)" fg:x="15013" fg:w="1227"/><text x="44.9555%" y="239.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (131 samples, 0.39%)</title><rect x="47.9692%" y="213" width="0.3901%" height="15" fill="rgb(245,182,24)" fg:x="16109" fg:w="131"/><text x="48.2192%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="48.3444%" y="197" width="0.0149%" height="15" fill="rgb(242,14,37)" fg:x="16235" fg:w="5"/><text x="48.5944%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="48.3473%" y="181" width="0.0119%" height="15" fill="rgb(246,228,12)" fg:x="16236" fg:w="4"/><text x="48.5973%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="48.3473%" y="165" width="0.0119%" height="15" fill="rgb(213,55,15)" fg:x="16236" fg:w="4"/><text x="48.5973%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="48.3473%" y="149" width="0.0119%" height="15" fill="rgb(209,9,3)" fg:x="16236" fg:w="4"/><text x="48.5973%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="48.3473%" y="133" width="0.0119%" height="15" fill="rgb(230,59,30)" fg:x="16236" fg:w="4"/><text x="48.5973%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="48.3473%" y="117" width="0.0119%" height="15" fill="rgb(209,121,21)" fg:x="16236" fg:w="4"/><text x="48.5973%" y="127.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::minus (8,121 samples, 24.18%)</title><rect x="24.2034%" y="277" width="24.1826%" height="15" fill="rgb(220,109,13)" fg:x="8128" fg:w="8121"/><text x="24.4534%" y="287.50">biodivine_lib_param_bn::symbolic_async..</text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::and_not (8,120 samples, 24.18%)</title><rect x="24.2064%" y="261" width="24.1796%" height="15" fill="rgb(232,18,1)" fg:x="8129" fg:w="8120"/><text x="24.4564%" y="271.50">biodivine_lib_bdd::_impl_bdd::_impl_bo..</text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (8,120 samples, 24.18%)</title><rect x="24.2064%" y="245" width="24.1796%" height="15" fill="rgb(215,41,42)" fg:x="8129" fg:w="8120"/><text x="24.4564%" y="255.50">biodivine_lib_bdd::_impl_bdd::_impl_bo..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (9 samples, 0.03%)</title><rect x="48.3592%" y="229" width="0.0268%" height="15" fill="rgb(224,123,36)" fg:x="16240" fg:w="9"/><text x="48.6092%" y="239.50"></text></g><g><title>__memset_avx2_unaligned_erms (6 samples, 0.02%)</title><rect x="48.3682%" y="213" width="0.0179%" height="15" fill="rgb(240,125,3)" fg:x="16243" fg:w="6"/><text x="48.6182%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.03%)</title><rect x="52.7634%" y="165" width="0.0268%" height="15" fill="rgb(205,98,50)" fg:x="17719" fg:w="9"/><text x="53.0134%" y="175.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.04%)</title><rect x="52.7604%" y="197" width="0.0447%" height="15" fill="rgb(205,185,37)" fg:x="17718" fg:w="15"/><text x="53.0104%" y="207.50"></text></g><g><title>_int_realloc (14 samples, 0.04%)</title><rect x="52.7634%" y="181" width="0.0417%" height="15" fill="rgb(238,207,15)" fg:x="17719" fg:w="14"/><text x="53.0134%" y="191.50"></text></g><g><title>_int_malloc (5 samples, 0.01%)</title><rect x="52.7902%" y="165" width="0.0149%" height="15" fill="rgb(213,199,42)" fg:x="17728" fg:w="5"/><text x="53.0402%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.05%)</title><rect x="52.7574%" y="229" width="0.0536%" height="15" fill="rgb(235,201,11)" fg:x="17717" fg:w="18"/><text x="53.0074%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.05%)</title><rect x="52.7604%" y="213" width="0.0506%" height="15" fill="rgb(207,46,11)" fg:x="17718" fg:w="17"/><text x="53.0104%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (429 samples, 1.28%)</title><rect x="52.8110%" y="229" width="1.2775%" height="15" fill="rgb(241,35,35)" fg:x="17735" fg:w="429"/><text x="53.0610%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (35 samples, 0.10%)</title><rect x="53.9843%" y="213" width="0.1042%" height="15" fill="rgb(243,32,47)" fg:x="18129" fg:w="35"/><text x="54.2343%" y="223.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::union (1,919 samples, 5.71%)</title><rect x="48.3860%" y="277" width="5.7144%" height="15" fill="rgb(247,202,23)" fg:x="16249" fg:w="1919"/><text x="48.6360%" y="287.50">biodivi..</text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::or (1,918 samples, 5.71%)</title><rect x="48.3890%" y="261" width="5.7114%" height="15" fill="rgb(219,102,11)" fg:x="16250" fg:w="1918"/><text x="48.6390%" y="271.50">biodivi..</text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (1,918 samples, 5.71%)</title><rect x="48.3890%" y="245" width="5.7114%" height="15" fill="rgb(243,110,44)" fg:x="16250" fg:w="1918"/><text x="48.6390%" y="255.50">biodivi..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (4 samples, 0.01%)</title><rect x="54.0885%" y="229" width="0.0119%" height="15" fill="rgb(222,74,54)" fg:x="18164" fg:w="4"/><text x="54.3385%" y="239.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="80.7873%" y="245" width="0.0328%" height="15" fill="rgb(216,99,12)" fg:x="27130" fg:w="11"/><text x="81.0373%" y="255.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="80.7873%" y="229" width="0.0328%" height="15" fill="rgb(226,22,26)" fg:x="27130" fg:w="11"/><text x="81.0373%" y="239.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="80.7903%" y="213" width="0.0298%" height="15" fill="rgb(217,163,10)" fg:x="27131" fg:w="10"/><text x="81.0403%" y="223.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="80.7903%" y="197" width="0.0298%" height="15" fill="rgb(213,25,53)" fg:x="27131" fg:w="10"/><text x="81.0403%" y="207.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="80.7933%" y="181" width="0.0268%" height="15" fill="rgb(252,105,26)" fg:x="27132" fg:w="9"/><text x="81.0433%" y="191.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="80.7933%" y="165" width="0.0268%" height="15" fill="rgb(220,39,43)" fg:x="27132" fg:w="9"/><text x="81.0433%" y="175.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="80.7963%" y="149" width="0.0238%" height="15" fill="rgb(229,68,48)" fg:x="27133" fg:w="8"/><text x="81.0463%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="80.7963%" y="133" width="0.0238%" height="15" fill="rgb(252,8,32)" fg:x="27133" fg:w="8"/><text x="81.0463%" y="143.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="80.7963%" y="117" width="0.0238%" height="15" fill="rgb(223,20,43)" fg:x="27133" fg:w="8"/><text x="81.0463%" y="127.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="80.7963%" y="101" width="0.0238%" height="15" fill="rgb(229,81,49)" fg:x="27133" fg:w="8"/><text x="81.0463%" y="111.50"></text></g><g><title>_int_free (5 samples, 0.01%)</title><rect x="80.8231%" y="245" width="0.0149%" height="15" fill="rgb(236,28,36)" fg:x="27142" fg:w="5"/><text x="81.0731%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::high_link_of (286 samples, 0.85%)</title><rect x="80.8379%" y="245" width="0.8516%" height="15" fill="rgb(249,185,26)" fg:x="27147" fg:w="286"/><text x="81.0879%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::low_link_of (295 samples, 0.88%)</title><rect x="81.6896%" y="245" width="0.8784%" height="15" fill="rgb(249,174,33)" fg:x="27433" fg:w="295"/><text x="81.9396%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="83.2797%" y="229" width="0.0119%" height="15" fill="rgb(233,201,37)" fg:x="27967" fg:w="4"/><text x="83.5297%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (43 samples, 0.13%)</title><rect x="83.3155%" y="165" width="0.1280%" height="15" fill="rgb(221,78,26)" fg:x="27979" fg:w="43"/><text x="83.5655%" y="175.50"></text></g><g><title>__GI___libc_realloc (69 samples, 0.21%)</title><rect x="83.3036%" y="197" width="0.2055%" height="15" fill="rgb(250,127,30)" fg:x="27975" fg:w="69"/><text x="83.5536%" y="207.50"></text></g><g><title>_int_realloc (67 samples, 0.20%)</title><rect x="83.3095%" y="181" width="0.1995%" height="15" fill="rgb(230,49,44)" fg:x="27977" fg:w="67"/><text x="83.5595%" y="191.50"></text></g><g><title>_int_malloc (19 samples, 0.06%)</title><rect x="83.4524%" y="165" width="0.0566%" height="15" fill="rgb(229,67,23)" fg:x="28025" fg:w="19"/><text x="83.7024%" y="175.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::push_node (318 samples, 0.95%)</title><rect x="82.5740%" y="245" width="0.9469%" height="15" fill="rgb(249,83,47)" fg:x="27730" fg:w="318"/><text x="82.8240%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (77 samples, 0.23%)</title><rect x="83.2916%" y="229" width="0.2293%" height="15" fill="rgb(215,43,3)" fg:x="27971" fg:w="77"/><text x="83.5416%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (73 samples, 0.22%)</title><rect x="83.3036%" y="213" width="0.2174%" height="15" fill="rgb(238,154,13)" fg:x="27975" fg:w="73"/><text x="83.5536%" y="223.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::root_pointer (154 samples, 0.46%)</title><rect x="83.5209%" y="245" width="0.4586%" height="15" fill="rgb(219,56,2)" fg:x="28048" fg:w="154"/><text x="83.7709%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::var_of (687 samples, 2.05%)</title><rect x="83.9795%" y="245" width="2.0457%" height="15" fill="rgb(233,0,4)" fg:x="28202" fg:w="687"/><text x="84.2295%" y="255.50">b..</text></g><g><title>biodivine_lib_bdd::_impl_bdd_node::&lt;impl biodivine_lib_bdd::BddNode&gt;::mk_node (75 samples, 0.22%)</title><rect x="86.0253%" y="245" width="0.2233%" height="15" fill="rgb(235,30,7)" fg:x="28889" fg:w="75"/><text x="86.2753%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd_pointer::&lt;impl biodivine_lib_bdd::BddPointer&gt;::as_bool (939 samples, 2.80%)</title><rect x="86.2486%" y="245" width="2.7961%" height="15" fill="rgb(250,79,13)" fg:x="28964" fg:w="939"/><text x="86.4986%" y="255.50">bi..</text></g><g><title>biodivine_lib_bdd::_impl_bdd_pointer::&lt;impl biodivine_lib_bdd::BddPointer&gt;::from_bool (70 samples, 0.21%)</title><rect x="89.0447%" y="245" width="0.2084%" height="15" fill="rgb(211,146,34)" fg:x="29903" fg:w="70"/><text x="89.2947%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd_pointer::&lt;impl biodivine_lib_bdd::BddPointer&gt;::is_one (278 samples, 0.83%)</title><rect x="89.2532%" y="245" width="0.8278%" height="15" fill="rgb(228,22,38)" fg:x="29973" fg:w="278"/><text x="89.5032%" y="255.50"></text></g><g><title>biodivine_lib_bdd::op_function::and (564 samples, 1.68%)</title><rect x="90.0810%" y="245" width="1.6795%" height="15" fill="rgb(235,168,5)" fg:x="30251" fg:w="564"/><text x="90.3310%" y="255.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="98.9072%" y="213" width="0.0447%" height="15" fill="rgb(221,155,16)" fg:x="33215" fg:w="15"/><text x="99.1572%" y="223.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="98.9220%" y="197" width="0.0298%" height="15" fill="rgb(215,215,53)" fg:x="33220" fg:w="10"/><text x="99.1720%" y="207.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="98.9220%" y="181" width="0.0298%" height="15" fill="rgb(223,4,10)" fg:x="33220" fg:w="10"/><text x="99.1720%" y="191.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="98.9220%" y="165" width="0.0298%" height="15" fill="rgb(234,103,6)" fg:x="33220" fg:w="10"/><text x="99.1720%" y="175.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="98.9220%" y="149" width="0.0298%" height="15" fill="rgb(227,97,0)" fg:x="33220" fg:w="10"/><text x="99.1720%" y="159.50"></text></g><g><title>[unknown] (10 samples, 0.03%)</title><rect x="98.9220%" y="133" width="0.0298%" height="15" fill="rgb(234,150,53)" fg:x="33220" fg:w="10"/><text x="99.1720%" y="143.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="98.9250%" y="117" width="0.0268%" height="15" fill="rgb(228,201,54)" fg:x="33221" fg:w="9"/><text x="99.1750%" y="127.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="98.9280%" y="101" width="0.0238%" height="15" fill="rgb(222,22,37)" fg:x="33222" fg:w="8"/><text x="99.1780%" y="111.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="98.9280%" y="85" width="0.0238%" height="15" fill="rgb(237,53,32)" fg:x="33222" fg:w="8"/><text x="99.1780%" y="95.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="98.9280%" y="69" width="0.0238%" height="15" fill="rgb(233,25,53)" fg:x="33222" fg:w="8"/><text x="99.1780%" y="79.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="98.9280%" y="53" width="0.0238%" height="15" fill="rgb(210,40,34)" fg:x="33222" fg:w="8"/><text x="99.1780%" y="63.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,420 samples, 7.21%)</title><rect x="91.7605%" y="245" width="7.2062%" height="15" fill="rgb(241,220,44)" fg:x="30815" fg:w="2420"/><text x="92.0105%" y="255.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (347 samples, 1.03%)</title><rect x="97.9334%" y="229" width="1.0333%" height="15" fill="rgb(235,28,35)" fg:x="32888" fg:w="347"/><text x="98.1834%" y="239.50"></text></g><g><title>biodivine_pbn_control::aeon::reachability::backward (25,128 samples, 74.83%)</title><rect x="24.1707%" y="293" width="74.8258%" height="15" fill="rgb(210,56,17)" fg:x="8117" fg:w="25128"/><text x="24.4207%" y="303.50">biodivine_pbn_control::aeon::reachability::backward</text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_symbolic_async_graph_operators::&lt;impl biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph&gt;::var_pre (15,077 samples, 44.90%)</title><rect x="54.1004%" y="277" width="44.8961%" height="15" fill="rgb(224,130,29)" fg:x="18168" fg:w="15077"/><text x="54.3504%" y="287.50">biodivine_lib_param_bn::symbolic_async_graph::_impl_symbolic_async_graph_o..</text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (15,076 samples, 44.89%)</title><rect x="54.1034%" y="261" width="44.8931%" height="15" fill="rgb(235,212,8)" fg:x="18169" fg:w="15076"/><text x="54.3534%" y="271.50">biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (10 samples, 0.03%)</title><rect x="98.9667%" y="245" width="0.0298%" height="15" fill="rgb(223,33,50)" fg:x="33235" fg:w="10"/><text x="99.2167%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (8 samples, 0.02%)</title><rect x="98.9727%" y="229" width="0.0238%" height="15" fill="rgb(219,149,13)" fg:x="33237" fg:w="8"/><text x="99.2227%" y="239.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::minus (89 samples, 0.27%)</title><rect x="98.9965%" y="277" width="0.2650%" height="15" fill="rgb(250,156,29)" fg:x="33245" fg:w="89"/><text x="99.2465%" y="287.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::and_not (89 samples, 0.27%)</title><rect x="98.9965%" y="261" width="0.2650%" height="15" fill="rgb(216,193,19)" fg:x="33245" fg:w="89"/><text x="99.2465%" y="271.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (89 samples, 0.27%)</title><rect x="98.9965%" y="245" width="0.2650%" height="15" fill="rgb(216,135,14)" fg:x="33245" fg:w="89"/><text x="99.2465%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (17 samples, 0.05%)</title><rect x="99.2109%" y="229" width="0.0506%" height="15" fill="rgb(241,47,5)" fg:x="33317" fg:w="17"/><text x="99.4609%" y="239.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_graph_colored_vertices::&lt;impl biodivine_lib_param_bn::biodivine_std::traits::Set for biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices&gt;::union (35 samples, 0.10%)</title><rect x="99.2615%" y="277" width="0.1042%" height="15" fill="rgb(233,42,35)" fg:x="33334" fg:w="35"/><text x="99.5115%" y="287.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::&lt;impl biodivine_lib_bdd::Bdd&gt;::or (35 samples, 0.10%)</title><rect x="99.2615%" y="261" width="0.1042%" height="15" fill="rgb(231,13,6)" fg:x="33334" fg:w="35"/><text x="99.5115%" y="271.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (35 samples, 0.10%)</title><rect x="99.2615%" y="245" width="0.1042%" height="15" fill="rgb(207,181,40)" fg:x="33334" fg:w="35"/><text x="99.5115%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (6 samples, 0.02%)</title><rect x="99.3479%" y="229" width="0.0179%" height="15" fill="rgb(254,173,49)" fg:x="33363" fg:w="6"/><text x="99.5979%" y="239.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::high_link_of (6 samples, 0.02%)</title><rect x="99.7558%" y="245" width="0.0179%" height="15" fill="rgb(221,1,38)" fg:x="33500" fg:w="6"/><text x="100.0058%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::root_pointer (4 samples, 0.01%)</title><rect x="99.7886%" y="245" width="0.0119%" height="15" fill="rgb(206,124,46)" fg:x="33511" fg:w="4"/><text x="100.0386%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_util::&lt;impl biodivine_lib_bdd::Bdd&gt;::var_of (10 samples, 0.03%)</title><rect x="99.8005%" y="245" width="0.0298%" height="15" fill="rgb(249,21,11)" fg:x="33515" fg:w="10"/><text x="100.0505%" y="255.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd_pointer::&lt;impl biodivine_lib_bdd::BddPointer&gt;::as_bool (10 samples, 0.03%)</title><rect x="99.8362%" y="245" width="0.0298%" height="15" fill="rgb(222,201,40)" fg:x="33527" fg:w="10"/><text x="100.0862%" y="255.50"></text></g><g><title>biodivine_lib_bdd::op_function::and (9 samples, 0.03%)</title><rect x="99.8839%" y="245" width="0.0268%" height="15" fill="rgb(235,61,29)" fg:x="33543" fg:w="9"/><text x="100.1339%" y="255.50"></text></g><g><title>biodivine-pbn-c (33,576 samples, 99.98%)</title><rect x="0.0000%" y="581" width="99.9821%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="33576"/><text x="0.2500%" y="591.50">biodivine-pbn-c</text></g><g><title>_start (33,573 samples, 99.97%)</title><rect x="0.0089%" y="565" width="99.9732%" height="15" fill="rgb(222,56,46)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="575.50">_start</text></g><g><title>__libc_start_main (33,573 samples, 99.97%)</title><rect x="0.0089%" y="549" width="99.9732%" height="15" fill="rgb(239,76,54)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="559.50">__libc_start_main</text></g><g><title>main (33,573 samples, 99.97%)</title><rect x="0.0089%" y="533" width="99.9732%" height="15" fill="rgb(231,124,27)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (33,573 samples, 99.97%)</title><rect x="0.0089%" y="517" width="99.9732%" height="15" fill="rgb(249,195,6)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (33,573 samples, 99.97%)</title><rect x="0.0089%" y="501" width="99.9732%" height="15" fill="rgb(237,174,47)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (33,573 samples, 99.97%)</title><rect x="0.0089%" y="485" width="99.9732%" height="15" fill="rgb(206,201,31)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33,573 samples, 99.97%)</title><rect x="0.0089%" y="469" width="99.9732%" height="15" fill="rgb(231,57,52)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (33,573 samples, 99.97%)</title><rect x="0.0089%" y="453" width="99.9732%" height="15" fill="rgb(248,177,22)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="463.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (33,573 samples, 99.97%)</title><rect x="0.0089%" y="437" width="99.9732%" height="15" fill="rgb(215,211,37)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (33,573 samples, 99.97%)</title><rect x="0.0089%" y="421" width="99.9732%" height="15" fill="rgb(241,128,51)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33,573 samples, 99.97%)</title><rect x="0.0089%" y="405" width="99.9732%" height="15" fill="rgb(227,165,31)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (33,573 samples, 99.97%)</title><rect x="0.0089%" y="389" width="99.9732%" height="15" fill="rgb(228,167,24)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (33,573 samples, 99.97%)</title><rect x="0.0089%" y="373" width="99.9732%" height="15" fill="rgb(228,143,12)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="383.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (33,573 samples, 99.97%)</title><rect x="0.0089%" y="357" width="99.9732%" height="15" fill="rgb(249,149,8)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>biodivine_pbn_control::main (33,573 samples, 99.97%)</title><rect x="0.0089%" y="341" width="99.9732%" height="15" fill="rgb(243,35,44)" fg:x="3" fg:w="33573"/><text x="0.2589%" y="351.50">biodivine_pbn_control::main</text></g><g><title>biodivine_pbn_control::aeon::attractors::compute (33,572 samples, 99.97%)</title><rect x="0.0119%" y="325" width="99.9702%" height="15" fill="rgb(246,89,9)" fg:x="4" fg:w="33572"/><text x="0.2619%" y="335.50">biodivine_pbn_control::aeon::attractors::compute</text></g><g><title>biodivine_pbn_control::aeon::tgr::reduction (25,536 samples, 76.04%)</title><rect x="23.9414%" y="309" width="76.0407%" height="15" fill="rgb(233,213,13)" fg:x="8040" fg:w="25536"/><text x="24.1914%" y="319.50">biodivine_pbn_control::aeon::tgr::reduction</text></g><g><title>biodivine_pbn_control::aeon::reachability::forward (331 samples, 0.99%)</title><rect x="98.9965%" y="293" width="0.9856%" height="15" fill="rgb(233,141,41)" fg:x="33245" fg:w="331"/><text x="99.2465%" y="303.50"></text></g><g><title>biodivine_lib_param_bn::symbolic_async_graph::_impl_symbolic_async_graph_operators::&lt;impl biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph&gt;::var_post (207 samples, 0.62%)</title><rect x="99.3657%" y="277" width="0.6164%" height="15" fill="rgb(239,167,4)" fg:x="33369" fg:w="207"/><text x="99.6157%" y="287.50"></text></g><g><title>biodivine_lib_bdd::_impl_bdd::_impl_boolean_ops::apply_with_flip (207 samples, 0.62%)</title><rect x="99.3657%" y="261" width="0.6164%" height="15" fill="rgb(209,217,16)" fg:x="33369" fg:w="207"/><text x="99.6157%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.07%)</title><rect x="99.9107%" y="245" width="0.0715%" height="15" fill="rgb(219,88,35)" fg:x="33552" fg:w="24"/><text x="100.1607%" y="255.50"></text></g><g><title>all (33,582 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="33582"/><text x="0.2500%" y="607.50"></text></g><g><title>perf (6 samples, 0.02%)</title><rect x="99.9821%" y="581" width="0.0179%" height="15" fill="rgb(230,90,52)" fg:x="33576" fg:w="6"/><text x="100.2321%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9821%" y="565" width="0.0179%" height="15" fill="rgb(252,106,19)" fg:x="33576" fg:w="6"/><text x="100.2321%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9821%" y="549" width="0.0179%" height="15" fill="rgb(206,74,20)" fg:x="33576" fg:w="6"/><text x="100.2321%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9821%" y="533" width="0.0179%" height="15" fill="rgb(230,138,44)" fg:x="33576" fg:w="6"/><text x="100.2321%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9821%" y="517" width="0.0179%" height="15" fill="rgb(235,182,43)" fg:x="33576" fg:w="6"/><text x="100.2321%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9821%" y="501" width="0.0179%" height="15" fill="rgb(242,16,51)" fg:x="33576" fg:w="6"/><text x="100.2321%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9821%" y="485" width="0.0179%" height="15" fill="rgb(248,9,4)" fg:x="33576" fg:w="6"/><text x="100.2321%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9821%" y="469" width="0.0179%" height="15" fill="rgb(210,31,22)" fg:x="33576" fg:w="6"/><text x="100.2321%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9821%" y="453" width="0.0179%" height="15" fill="rgb(239,54,39)" fg:x="33576" fg:w="6"/><text x="100.2321%" y="463.50"></text></g></svg></svg>